<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="kafka_producer_config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="kafkaInnerPoint" elementType="Argument">
            <stringProp name="Argument.name">kafkaInnerPoint</stringProp>
            <stringProp name="Argument.value">192.168.56.101:9092,192.168.56.101:9093,192.168.56.101:9094</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topicProducer" elementType="Argument">
            <stringProp name="Argument.name">topicProducer</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="retries" elementType="Argument">
            <stringProp name="Argument.name">retries</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="buffer.memory" elementType="Argument">
            <stringProp name="Argument.name">buffer.memory</stringProp>
            <stringProp name="Argument.value">10485760</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batch.size" elementType="Argument">
            <stringProp name="Argument.name">batch.size</stringProp>
            <stringProp name="Argument.value">16384</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acks" elementType="Argument">
            <stringProp name="Argument.name">acks</stringProp>
            <stringProp name="Argument.value">all</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="max.request.size" elementType="Argument">
            <stringProp name="Argument.name">max.request.size</stringProp>
            <stringProp name="Argument.value">10485760</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linger.ms" elementType="Argument">
            <stringProp name="Argument.name">linger.ms</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="kafka_consumer_config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="group.id" elementType="Argument">
            <stringProp name="Argument.name">group.id</stringProp>
            <stringProp name="Argument.value">jmeter_consumer</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="enable.auto.commit" elementType="Argument">
            <stringProp name="Argument.name">enable.auto.commit</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auto.commit.interval.ms" elementType="Argument">
            <stringProp name="Argument.name">auto.commit.interval.ms</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="session.timeout.ms" elementType="Argument">
            <stringProp name="Argument.name">session.timeout.ms</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="max.poll.records" elementType="Argument">
            <stringProp name="Argument.name">max.poll.records</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topicConsumer" elementType="Argument">
            <stringProp name="Argument.name">topicConsumer</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="producerProp" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.config.SslConfigs;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.example.SharedHashMap;

sharedHashMap = SharedHashMap.GetInstance();

	Properties props = new Properties();
	
	props.put(&quot;bootstrap.servers&quot;, &quot;${kafkaInnerPoint}&quot;);

	
	props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, &quot;PLAINTEXT&quot;);
	//Set acknowledgements for producer requests.
	props.put(&quot;acks&quot;, &quot;${acks}&quot;);
	//If the request fails, the producer can automatically retry,
	props.put(&quot;retries&quot;, ${retries});
	//Specify buffer size in config
	props.put(&quot;batch.size&quot;, ${batch.size});
	//Reduce the no of requests less than 0
	props.put(&quot;linger.ms&quot;, ${linger.ms});
	//The buffer.memory controls the total amount of memory available to the producer for buffering.
	props.put(&quot;buffer.memory&quot;, ${buffer.memory}); 

	props.put(&quot;max.request.size&quot;, ${max.request.size});
	
	props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.LongSerializer&quot;);
	props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
	
	
	KafkaProducer producer_1 = new KafkaProducer(props);
	sharedHashMap.put(&quot;producer_1&quot;, producer_1);

	</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="consumerProp" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.clients.CommonClientConfigs;
import org.example.SharedHashMap;

sharedHashMap = SharedHashMap.GetInstance();

	Properties props = new Properties();
	props.put(&quot;bootstrap.servers&quot;, &quot;${kafkaInnerPoint}&quot;);

	//configure the following three settings for SSL Encryption
	
	props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, &quot;PLAINTEXT&quot;);
	
	
	props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.LongDeserializer&quot;);
	props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);


	props.put(&quot;group.id&quot;, &quot;${group.id}&quot;);
	props.put(&quot;enable.auto.commit&quot;, &quot;${enable.auto.commit}&quot;);
	props.put(&quot;auto.commit.interval.ms&quot;, &quot;${auto.commit.interval.ms}&quot;);
	props.put(&quot;session.timeout.ms&quot;, &quot;${session.timeout.ms}&quot;);
	props.put(&quot;max.poll.records&quot;, &quot;${max.poll.records}&quot;);
	
	

	KafkaConsumer kafka_consumer_1 = new KafkaConsumer(props);

	//String[] topics1 = { &quot;${TopicNameProducerEFS}_RS&quot;,&quot;${TopicNameProducerPPRB}_RS&quot; };
	//String[] topics1 = { &quot;${TopicNameConsumer}&quot; };
	//log.info(topics1[0]);

	kafka_consumer_1.subscribe(Arrays.asList(&quot;${topicConsumer}&quot;));
	sharedHashMap.put(&quot;consumer_1&quot;, kafka_consumer_1);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Producer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Producer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.config.SslConfigs;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.protocol.types.Field;
import org.example.SharedHashMap;


String msg = &quot;HELLO WORLD FROM JSRSAMPLER!!!&quot;;

String TopicName = vars.get(&quot;topicProducer&quot;);


sharedHashMap = SharedHashMap.GetInstance();

Producer producer = sharedHashMap.get(&quot;producer_1&quot;);


ProducerRecord pr = new ProducerRecord(TopicName, null, msg);

producer.send(pr);
log.info(System.currentTimeMillis()+&quot;, Send kafka message(${topicProducer}): &quot; + msg);
producer.flush();
producer.close();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Consumer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Consumer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.*;
import org.example.SharedHashMap;
import java.time.Duration;

sharedHashMap = SharedHashMap.GetInstance();

KafkaConsumer consumer = sharedHashMap.get(&quot;consumer_1&quot;);

ConsumerRecords records = consumer.poll(Duration.ofMillis(10000)); 
for (ConsumerRecord record : records) {
	log.info(System.currentTimeMillis()+&quot;, received kafka consumer message (${topicConsumer})&quot;+record);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="producerClose" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.config.SslConfigs;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.protocol.types.Field;
import org.example.SharedHashMap;

sharedHashMap = SharedHashMap.GetInstance();

Producer producer = sharedHashMap.get(&quot;producer_1&quot;); 
producer.flush();
producer.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="consumerClose" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.*;
import org.example.SharedHashMap;

sharedHashMap = SharedHashMap.GetInstance();

KafkaConsumer consumer = sharedHashMap.get(&quot;consumer_1&quot;); 

consumer.close();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
